from typing import Generator, Iterable, Optional, Protocol

from nptyping import Float, NDArray, Shape

class _random_unit_vector_rng_signature(Protocol):
    def normal(self, size: int) -> NDArray[Shape["3"], Float]: ...

def normalized_vector(
    vec: NDArray[Shape["3"], Float]
) -> NDArray[Shape["3"], Float]: ...
def vector_norm(vec: NDArray[Shape["3"], Float]) -> float: ...
def inique(iterable: Iterable[float]) -> Generator[float, None, None]: ...
def permuted_signs(seq: Iterable[float]) -> Generator[float, None, None]: ...
def permuted_with_signs(seq: Iterable[float]) -> Generator[float, None, None]: ...
def random_unit_vector(
    rng: Optional[_random_unit_vector_rng_signature],
) -> NDArray[Shape["3"], Float]: ...
